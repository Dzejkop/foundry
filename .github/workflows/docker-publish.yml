name: docker

on:
    push:
        branches:
            - main
            - master
        tags:
            - "v*.*.*"
    schedule:
        - cron: "0 0 * * *"
    workflow_dispatch: {}
    workflow_call:

env:
    REGISTRY: ghcr.io

jobs:
    build_amd64:
        runs-on: ubuntu-20.04
        permissions:
            id-token: write
            packages: write
            contents: read
        timeout-minutes: 120
        outputs:
            docker_tag: ${{ steps.docker_tagging.outputs.docker_tags }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Docker BuildX
              uses: docker/setup-buildx-action@v2
              with:
                  install: true

            - name: Convert GitHub repository to lowercase
              id: lower_repo
              run: echo "LOWER_REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

            - name: Finalize Docker Metadata
              id: docker_tagging
              run: |
                  if [[ "${{ github.event_name }}" == 'schedule' ]]; then
                    echo "cron trigger, assigning nightly tag"
                    echo "docker_tags=${{ env.REGISTRY }}/${{ env.LOWER_REPO }}:nightly,${{ env.REGISTRY }}/${{ env.LOWER_REPO }}:nightly-${GITHUB_SHA}" >> $GITHUB_OUTPUT
                  elif [[ "${GITHUB_REF##*/}" == "main" ]] || [[ ${GITHUB_REF##*/} == "master" ]]; then
                    echo "manual trigger from master/main branch, assigning latest tag"
                    echo "docker_tags=${{ env.REGISTRY }}/${{ env.LOWER_REPO }}:${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
                  else
                    echo "Neither scheduled nor manual release from main branch. Just tagging as branch name"
                    echo "docker_tags=${{ env.REGISTRY }}/${{ env.LOWER_REPO }}:${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
                  fi

            - name: Build Docker image (amd64)
              run: |
                  docker buildx build --platform linux/amd64 --load --tag ${{ steps.docker_tagging.outputs.docker_tags }} .

            - name: Save image as artifact
              run: |
                  docker save ${{ steps.docker_tagging.outputs.docker_tags }} -o image_amd64.tar

            - name: Upload artifact
              uses: actions/upload-artifact@v2
              with:
                  name: image_amd64
                  path: image_amd64.tar

    build_arm64:
        runs-on: ubuntu-20.04-arm
        permissions:
            id-token: write
            packages: write
            contents: read
        timeout-minutes: 120
        outputs:
            docker_tag: ${{ steps.docker_tagging.outputs.docker_tags }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Docker BuildX
              uses: docker/setup-buildx-action@v2
              with:
                  install: true

            - name: Convert GitHub repository to lowercase
              id: lower_repo
              run: echo "LOWER_REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

            - name: Finalize Docker Metadata
              id: docker_tagging
              run: |
                  if [[ "${{ github.event_name }}" == 'schedule' ]]; then
                    echo "cron trigger, assigning nightly tag"
                    echo "docker_tags=${{ env.REGISTRY }}/${{ env.LOWER_REPO }}:nightly,${{ env.REGISTRY }}/${{ env.LOWER_REPO }}:nightly-${GITHUB_SHA}" >> $GITHUB_OUTPUT
                  elif [[ "${GITHUB_REF##*/}" == "main" ]] || [[ ${GITHUB_REF##*/} == "master" ]]; then
                    echo "manual trigger from master/main branch, assigning latest tag"
                    echo "docker_tags=${{ env.REGISTRY }}/${{ env.LOWER_REPO }}:${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
                  else
                    echo "Neither scheduled nor manual release from main branch. Just tagging as branch name"
                    echo "docker_tags=${{ env.REGISTRY }}/${{ env.LOWER_REPO }}:${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
                  fi

            - name: Build Docker image (arm64)
              run: |
                  docker buildx build --platform linux/arm64 --load --tag ${{ steps.docker_tagging.outputs.docker_tags }} .

            - name: Save image as artifact
              run: |
                  docker save ${{ steps.docker_tagging.outputs.docker_tags }} -o image_arm64.tar

            - name: Upload artifact
              uses: actions/upload-artifact@v2
              with:
                  name: image_arm64
                  path: image_arm64.tar

    consolidate:
        needs: [build_amd64, build_arm64]
        runs-on: ubuntu-20.04
        permissions:
            id-token: write
            packages: write
            contents: read
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Docker BuildX
              uses: docker/setup-buildx-action@v2
              with:
                  install: true

            - name: Download amd64 image artifact
              uses: actions/download-artifact@v2
              with:
                  name: image_amd64
                  path: .

            - name: Download arm64 image artifact
              uses: actions/download-artifact@v2
              with:
                  name: image_arm64
                  path: .

            - name: Load amd64 image
              run: |
                  docker load -i image_amd64.tar

            - name: Load arm64 image
              run: |
                  docker load -i image_arm64.tar

            - name: Convert GitHub repository to lowercase
              id: lower_repo
              run: echo "LOWER_REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

            - name: Log into registry ${{ env.REGISTRY }}
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Create and push multi-platform image
              run: |
                  docker buildx imagetools create -t ${{ needs.build_amd64.outputs.docker_tag }} $(docker image inspect --format '{{.RepoDigests}}' ${{ needs.build_amd64.outputs.docker_tag }} | tr -d '[]') $(docker image inspect --format '{{.RepoDigests}}' ${{ needs.build_arm64.outputs.docker_tag }} | tr -d '[]')
                  docker buildx imagetools inspect ${{ needs.build_amd64.outputs.docker_tag }}
